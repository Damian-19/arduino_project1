
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000731  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  00000a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c5  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a6  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d3  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  9e:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
uint16_t adc_reading;

void init(void)
{
	//Set PortD to all outputs because LEDs are connected to this PORT
	DDRD = 0xff;	// 0xff = 0b11111111; all ones
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;		// Initialise to all off
  aa:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0b00000000;
  ac:	14 b8       	out	0x04, r1	; 4
	PORTB = 0;
  ae:	15 b8       	out	0x05, r1	; 5
	
	timecount0 = 0;
  b0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timecount0+0x1>
  b4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timecount0>
	TCCR0B = (5<<CS00);	// Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A = 0;			// Not strictly necessary as these are the reset states but it's good
  bc:	14 bc       	out	0x24, r1	; 36
	// practice to show what you're doing
	TCNT0 = tcnt0_start;			// Recall: 256-61 = 195 & 195*64us = 12.48ms, approx 12.5ms
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c2:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);	// Enable Timer 0 interrupt
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	// ADC initialization
	ADMUX = ((1<<REFS0) | (0 << ADLAR) | (0<<MUX0));  /* AVCC selected for VREF, ADC0 as ADC input  */
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = ((1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(6<<ADPS0));
  d0:	8e ee       	ldi	r24, 0xEE	; 238
  d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
										/* Enable ADC, Start Conversion, Auto Trigger enabled, 
										   Interrupt enabled, Prescale = 64  */
	ADCSRB = (0<<ADTS0); /* Select AutoTrigger Source to Free Running Mode 
  d6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
						    Strictly speaking - this is already 0, so we could omit the write to
						    ADCSRB, but this is included here so the intent is clear */
	
	sei();				// Global interrupt enable (I=1)
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <main>:
}

int main(void)
{
	init();
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
    while(1)
	{
		if (adc_flag == 1)
  e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	91 05       	cpc	r25, r1
  ee:	e9 f7       	brne	.-6      	; 0xea <main+0xc>
		{
			PORTD = PORTD | (1<<PORTD7);
  f0:	5f 9a       	sbi	0x0b, 7	; 11
			adc_flag = 0;
  f2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
  f6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  fa:	f3 cf       	rjmp	.-26     	; 0xe2 <main+0x4>

000000fc <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	TCNT0 = tcnt0_start;		// set to 
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 112:	86 bd       	out	0x26, r24	; 38
	++timecount0;	// count the number of times the interrupt has been reached
 114:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timecount0>
 118:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timecount0+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timecount0+0x1>
 122:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timecount0>
	
	if (timecount0 >= time_delay)	
 126:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <time_delay>
 12a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <time_delay+0x1>
 12e:	82 17       	cp	r24, r18
 130:	93 07       	cpc	r25, r19
 132:	38 f0       	brcs	.+14     	; 0x142 <__vector_16+0x46>
	{
		PORTD = ~PORTD;		// Toggle all the bits
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	80 95       	com	r24
 138:	8b b9       	out	0x0b, r24	; 11
		timecount0 = 0;		// Restart the overflow counter
 13a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timecount0+0x1>
 13e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timecount0>
	}
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_21>:

ISR (ADC_vect)	/* handles ADC interrupts  */
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	
	adc_reading = ADC;   /* ADC is in Free Running Mode - you don't have to set up anything for 
 168:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 16c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 170:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adc_reading+0x1>
 174:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adc_reading>
						    the next conversion */
	if (adc_reading != 0) // check if new adc reading available
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	39 f1       	breq	.+78     	; 0x1ca <__vector_21+0x76>
	{
		adc_flag = 1; // set flag
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
 184:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
	}
	
	if ((adc_reading < LOWER_THRESHOLD_VOLTAGE) && (adc_reading > 0)) // check adc voltage is between 0V-2.5V
 188:	9c 01       	movw	r18, r24
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	31 09       	sbc	r19, r1
 18e:	2e 3f       	cpi	r18, 0xFE	; 254
 190:	31 40       	sbci	r19, 0x01	; 1
 192:	58 f4       	brcc	.+22     	; 0x1aa <__vector_21+0x56>
	{
		// 1s delay
		tcnt0_start = 125; // set start of timer count
 194:	8d e7       	ldi	r24, 0x7D	; 125
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 19c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		time_delay = 125; // set number of overflows
 1a0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_delay+0x1>
 1a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_delay>
 1a8:	10 c0       	rjmp	.+32     	; 0x1ca <__vector_21+0x76>
	} else if ((adc_reading < UPPER_THRESHOLD_VOLTAGE) && (adc_reading > LOWER_THRESHOLD_VOLTAGE)) // otherwise if adc voltage is between 2.5V-5V
 1aa:	92 50       	subi	r25, 0x02	; 2
 1ac:	8f 3f       	cpi	r24, 0xFF	; 255
 1ae:	91 40       	sbci	r25, 0x01	; 1
 1b0:	60 f4       	brcc	.+24     	; 0x1ca <__vector_21+0x76>
	{
		// 0.5s delay
		tcnt0_start = 142; // set start of timer count
 1b2:	8e e8       	ldi	r24, 0x8E	; 142
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		time_delay = 55; // set number of overflows
 1be:	87 e3       	ldi	r24, 0x37	; 55
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_delay+0x1>
 1c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_delay>
	}
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
