
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000518  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  0000058c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000080d  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c3  00000000  00000000  00000e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cf  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a9  00000000  00000000  00001e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ba 01 	call	0x374	; 0x374 <main>
  88:	0c 94 8a 02 	jmp	0x514	; 0x514 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
*initialization function 
***************************/
void init(void)
{
	//Set PortD to all outputs because LEDs are connected to this PORT
	DDRD = 0xff;	// 0xff = 0b11111111; all ones
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;		// 
  94:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0b00000000; // set PORTB to inputs
  96:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b00110000; // enable pull up resistors on pins 4 & 5
  98:	80 e3       	ldi	r24, 0x30	; 48
  9a:	85 b9       	out	0x05, r24	; 5
	
	// initialize global variables
	timecount0 = 0;
  9c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timecount0+0x1>
  a0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timecount0>
	adc_flag = 0;
  a4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <adc_flag+0x1>
  a8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <adc_flag>
	display_flag = 1;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <display_flag+0x1>
  b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <display_flag>
	tcnt0_start = 125;
  b8:	8d e7       	ldi	r24, 0x7D	; 125
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tcnt0_start+0x1>
  c0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tcnt0_start>
	time_delay = 0;
  c4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <time_delay+0x1>
  c8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <time_delay>
	direction = 0; // start cylon eyes heading down (7-0)
  cc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <direction+0x1>
  d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <direction>
	active_led = 7; // start cylon eyes at bit 7
  d4:	87 e0       	ldi	r24, 0x07	; 7
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <active_led+0x1>
  dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <active_led>
	
	TCCR0B = (5<<CS00);	// Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A = 0;			// Not strictly necessary as these are the reset states but it's good
  e4:	14 bc       	out	0x24, r1	; 36
	// practice to show what you're doing
	TCNT0 = tcnt0_start;			// Recall: 256-61 = 195 & 195*64us = 12.48ms, approx 12.5ms
  e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tcnt0_start>
  ea:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tcnt0_start+0x1>
  ee:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);	// Enable Timer 0 interrupt
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	// ADC initialization
	ADMUX = ((1<<REFS0) | (0 << ADLAR) | (0<<MUX0));  /* AVCC selected for VREF, ADC0 as ADC input  */
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = ((1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(6<<ADPS0));
  fc:	8e ee       	ldi	r24, 0xEE	; 238
  fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
										/* Enable ADC, Start Conversion, Auto Trigger enabled, 
										   Interrupt enabled, Prescale = 64  */
	ADCSRB = (0<<ADTS0); /* Select AutoTrigger Source to Free Running Mode 
 102:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
						    Strictly speaking - this is already 0, so we could omit the write to
						    ADCSRB, but this is included here so the intent is clear */
	
	sei();				// Global interrupt enable (I=1)
 106:	78 94       	sei
 108:	08 95       	ret

0000010a <cylon_loop>:
*looping cylon pattern function
*********************************/
void cylon_loop(int end)
{
	// cylon pattern
	if (direction == 0) { // check if direction is down
 10a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <direction>
 10e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <direction+0x1>
 112:	23 2b       	or	r18, r19
 114:	21 f5       	brne	.+72     	; 0x15e <cylon_loop+0x54>
		active_led--; // decrement the active led
 116:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <active_led>
 11a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <active_led+0x1>
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
 122:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <active_led+0x1>
 126:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <active_led>
		if (active_led <= end) { // check if led has reached the start (pin 4 or 0)
 12a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <active_led>
 12e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <active_led+0x1>
 132:	82 17       	cp	r24, r18
 134:	93 07       	cpc	r25, r19
 136:	30 f0       	brcs	.+12     	; 0x144 <cylon_loop+0x3a>
			direction = 1; // set direction to up
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <direction+0x1>
 140:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <direction>
		}
		PORTD = 0b00000001 << active_led; // set pin of portd to current led
 144:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <active_led>
 148:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <active_led+0x1>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <cylon_loop+0x4c>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <cylon_loop+0x48>
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	08 95       	ret
		
		} else if (direction == 1) { // check if direction is up
 15e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <direction>
 162:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <direction+0x1>
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f9 f4       	brne	.+62     	; 0x1a8 <cylon_loop+0x9e>
		active_led++; // increment the active led
 16a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <active_led>
 16e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <active_led+0x1>
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <active_led+0x1>
 178:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <active_led>
		if (active_led >= 7) { // check if led has reached end (pin 7)
 17c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <active_led>
 180:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <active_led+0x1>
 184:	07 97       	sbiw	r24, 0x07	; 7
 186:	20 f0       	brcs	.+8      	; 0x190 <cylon_loop+0x86>
			direction = 0; // set direction to down
 188:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <direction+0x1>
 18c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <direction>
		}
		PORTD = 0b00000001 << active_led; // set pin of portd to current led
 190:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <active_led>
 194:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <active_led+0x1>
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <cylon_loop+0x98>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	2a 95       	dec	r18
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <cylon_loop+0x94>
 1a6:	8b b9       	out	0x0b, r24	; 11
 1a8:	08 95       	ret

000001aa <adc_display>:
		}
}

void adc_display(int display_flag)
{
	if (display_flag == 1)
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	91 05       	cpc	r25, r1
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <adc_display+0x8>
 1b0:	90 c0       	rjmp	.+288    	; 0x2d2 <adc_display+0x128>
	{
		if ((adc_reading >= 0) && (adc_reading <= ONE_EIGHT_VOLTAGE))
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1c2:	81 38       	cpi	r24, 0x81	; 129
 1c4:	91 05       	cpc	r25, r1
 1c6:	10 f4       	brcc	.+4      	; 0x1cc <adc_display+0x22>
		{
			PORTD = 0b00000000;
 1c8:	1b b8       	out	0x0b, r1	; 11
 1ca:	08 95       	ret
		} else if ((adc_reading >= ONE_EIGHT_VOLTAGE) && (adc_reading <= ONE_QUARTER_VOLTAGE))
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1d4:	80 38       	cpi	r24, 0x80	; 128
 1d6:	91 05       	cpc	r25, r1
 1d8:	50 f0       	brcs	.+20     	; 0x1ee <adc_display+0x44>
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	91 40       	sbci	r25, 0x01	; 1
 1e6:	18 f4       	brcc	.+6      	; 0x1ee <adc_display+0x44>
		{
			PORTD = 0b00000001;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	8b b9       	out	0x0b, r24	; 11
 1ec:	08 95       	ret
		} else if ((adc_reading >= ONE_QUARTER_VOLTAGE) && (adc_reading <= THREE_EIGHT_VOLTAGE))
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1f6:	8f 3f       	cpi	r24, 0xFF	; 255
 1f8:	91 05       	cpc	r25, r1
 1fa:	59 f0       	breq	.+22     	; 0x212 <adc_display+0x68>
 1fc:	50 f0       	brcs	.+20     	; 0x212 <adc_display+0x68>
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 202:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 206:	81 38       	cpi	r24, 0x81	; 129
 208:	91 40       	sbci	r25, 0x01	; 1
 20a:	18 f4       	brcc	.+6      	; 0x212 <adc_display+0x68>
		{
			PORTD = 0b00000011;
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	08 95       	ret
		} else if ((adc_reading >= THREE_EIGHT_VOLTAGE) && (adc_reading <= HALF_VOLTAGE))
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 216:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 21a:	80 38       	cpi	r24, 0x80	; 128
 21c:	91 40       	sbci	r25, 0x01	; 1
 21e:	50 f0       	brcs	.+20     	; 0x234 <adc_display+0x8a>
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	92 40       	sbci	r25, 0x02	; 2
 22c:	18 f4       	brcc	.+6      	; 0x234 <adc_display+0x8a>
		{
			PORTD = 0b00000111;
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	8b b9       	out	0x0b, r24	; 11
 232:	08 95       	ret
		} else if ((adc_reading >= HALF_VOLTAGE) && (adc_reading <= FIVE_EIGHT_VOLTAGE))
 234:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 238:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 23c:	81 15       	cp	r24, r1
 23e:	92 40       	sbci	r25, 0x02	; 2
 240:	50 f0       	brcs	.+20     	; 0x256 <adc_display+0xac>
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 246:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 24a:	80 38       	cpi	r24, 0x80	; 128
 24c:	92 40       	sbci	r25, 0x02	; 2
 24e:	18 f4       	brcc	.+6      	; 0x256 <adc_display+0xac>
		{
			PORTD = 0b00001111;
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	8b b9       	out	0x0b, r24	; 11
 254:	08 95       	ret
		} else if ((adc_reading >= FIVE_EIGHT_VOLTAGE) && (adc_reading <= THREE_QUARTER_VOLTAGE))
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 25a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 25e:	8f 37       	cpi	r24, 0x7F	; 127
 260:	92 40       	sbci	r25, 0x02	; 2
 262:	50 f0       	brcs	.+20     	; 0x278 <adc_display+0xce>
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 26c:	81 15       	cp	r24, r1
 26e:	93 40       	sbci	r25, 0x03	; 3
 270:	18 f4       	brcc	.+6      	; 0x278 <adc_display+0xce>
		{
			PORTD = 0b00011111;
 272:	8f e1       	ldi	r24, 0x1F	; 31
 274:	8b b9       	out	0x0b, r24	; 11
 276:	08 95       	ret
		} else if ((adc_reading >= THREE_QUARTER_VOLTAGE) && (adc_reading <= SEVEN_EIGHT_VOLTAGE))
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 280:	8f 3f       	cpi	r24, 0xFF	; 255
 282:	92 40       	sbci	r25, 0x02	; 2
 284:	50 f0       	brcs	.+20     	; 0x29a <adc_display+0xf0>
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 28a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 28e:	80 38       	cpi	r24, 0x80	; 128
 290:	93 40       	sbci	r25, 0x03	; 3
 292:	18 f4       	brcc	.+6      	; 0x29a <adc_display+0xf0>
		{
			PORTD = 0b00111111;
 294:	8f e3       	ldi	r24, 0x3F	; 63
 296:	8b b9       	out	0x0b, r24	; 11
 298:	08 95       	ret
		} else if ((adc_reading >= SEVEN_EIGHT_VOLTAGE) && (adc_reading < UPPER_THRESHOLD_VOLTAGE))
 29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 29e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2a2:	8f 37       	cpi	r24, 0x7F	; 127
 2a4:	93 40       	sbci	r25, 0x03	; 3
 2a6:	50 f0       	brcs	.+20     	; 0x2bc <adc_display+0x112>
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2b0:	8f 3f       	cpi	r24, 0xFF	; 255
 2b2:	93 40       	sbci	r25, 0x03	; 3
 2b4:	18 f4       	brcc	.+6      	; 0x2bc <adc_display+0x112>
		{
			PORTD = 0b01111111;
 2b6:	8f e7       	ldi	r24, 0x7F	; 127
 2b8:	8b b9       	out	0x0b, r24	; 11
 2ba:	08 95       	ret
		} else if (adc_reading == UPPER_THRESHOLD_VOLTAGE)
 2bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2c4:	8f 3f       	cpi	r24, 0xFF	; 255
 2c6:	93 40       	sbci	r25, 0x03	; 3
 2c8:	09 f0       	breq	.+2      	; 0x2cc <adc_display+0x122>
 2ca:	53 c0       	rjmp	.+166    	; 0x372 <adc_display+0x1c8>
		{
			PORTD = 0b11111111;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	8b b9       	out	0x0b, r24	; 11
 2d0:	08 95       	ret
		}
	} else if (display_flag == 0)
 2d2:	89 2b       	or	r24, r25
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <adc_display+0x12e>
 2d6:	4d c0       	rjmp	.+154    	; 0x372 <adc_display+0x1c8>
	{
		if ((adc_reading >= 0) && (adc_reading <= ONE_QUARTER_VOLTAGE))
 2d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	91 40       	sbci	r25, 0x01	; 1
 2ec:	18 f4       	brcc	.+6      	; 0x2f4 <adc_display+0x14a>
		{
			PORTD |= 0b00000000;
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	8b b9       	out	0x0b, r24	; 11
 2f2:	08 95       	ret
		} else if ((adc_reading >= ONE_QUARTER_VOLTAGE) && (adc_reading <= HALF_VOLTAGE))
 2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2fc:	8f 3f       	cpi	r24, 0xFF	; 255
 2fe:	91 05       	cpc	r25, r1
 300:	51 f0       	breq	.+20     	; 0x316 <adc_display+0x16c>
 302:	48 f0       	brcs	.+18     	; 0x316 <adc_display+0x16c>
 304:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 308:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	92 40       	sbci	r25, 0x02	; 2
 310:	10 f4       	brcc	.+4      	; 0x316 <adc_display+0x16c>
		{
			PORTD |= 0b00000001;
 312:	58 9a       	sbi	0x0b, 0	; 11
 314:	08 95       	ret
		} else if ((adc_reading >= HALF_VOLTAGE) && (adc_reading <= THREE_QUARTER_VOLTAGE))
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 31a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 31e:	81 15       	cp	r24, r1
 320:	92 40       	sbci	r25, 0x02	; 2
 322:	58 f0       	brcs	.+22     	; 0x33a <adc_display+0x190>
 324:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 328:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 32c:	81 15       	cp	r24, r1
 32e:	93 40       	sbci	r25, 0x03	; 3
 330:	20 f4       	brcc	.+8      	; 0x33a <adc_display+0x190>
		{
			PORTD |= 0b00000011;
 332:	8b b1       	in	r24, 0x0b	; 11
 334:	83 60       	ori	r24, 0x03	; 3
 336:	8b b9       	out	0x0b, r24	; 11
 338:	08 95       	ret
		} else if ((adc_reading >= THREE_QUARTER_VOLTAGE) && (adc_reading < UPPER_THRESHOLD_VOLTAGE))
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 33e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 342:	8f 3f       	cpi	r24, 0xFF	; 255
 344:	92 40       	sbci	r25, 0x02	; 2
 346:	58 f0       	brcs	.+22     	; 0x35e <adc_display+0x1b4>
 348:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 34c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 350:	8f 3f       	cpi	r24, 0xFF	; 255
 352:	93 40       	sbci	r25, 0x03	; 3
 354:	20 f4       	brcc	.+8      	; 0x35e <adc_display+0x1b4>
		{
			PORTD |= 0b00000111;
 356:	8b b1       	in	r24, 0x0b	; 11
 358:	87 60       	ori	r24, 0x07	; 7
 35a:	8b b9       	out	0x0b, r24	; 11
 35c:	08 95       	ret
		} else if (adc_reading == UPPER_THRESHOLD_VOLTAGE)
 35e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 362:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 366:	8f 3f       	cpi	r24, 0xFF	; 255
 368:	93 40       	sbci	r25, 0x03	; 3
 36a:	19 f4       	brne	.+6      	; 0x372 <adc_display+0x1c8>
		{
			PORTD |= 0b00001111;
 36c:	8b b1       	in	r24, 0x0b	; 11
 36e:	8f 60       	ori	r24, 0x0F	; 15
 370:	8b b9       	out	0x0b, r24	; 11
 372:	08 95       	ret

00000374 <main>:
	}
}

int main(void)
{
	init();
 374:	0e 94 48 00 	call	0x90	; 0x90 <init>
		{
			if ((PINB & 0b00100000) == 0b00100000)
			{
				if ((PINB & 0b00010000) == 0b00000000)
				{
					display_flag = 1;
 378:	c1 e0       	ldi	r28, 0x01	; 1
 37a:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	init();
    while(1)
	{
		if (adc_flag)
 37c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <adc_flag>
 380:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <adc_flag+0x1>
 384:	89 2b       	or	r24, r25
 386:	d1 f3       	breq	.-12     	; 0x37c <main+0x8>
		{
			if ((PINB & 0b00100000) == 0b00100000)
 388:	1d 9b       	sbis	0x03, 5	; 3
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <main+0x32>
			{
				if ((PINB & 0b00010000) == 0b00000000)
 38c:	1c 99       	sbic	0x03, 4	; 3
 38e:	f6 cf       	rjmp	.-20     	; 0x37c <main+0x8>
				{
					display_flag = 1;
 390:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <display_flag+0x1>
 394:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <display_flag>
					adc_display(display_flag);
 398:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <display_flag>
 39c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <display_flag+0x1>
 3a0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <adc_display>
 3a4:	eb cf       	rjmp	.-42     	; 0x37c <main+0x8>
				}
			} else if ((PINB & 0b00100000) == 0b00000000)
 3a6:	1d 99       	sbic	0x03, 5	; 3
 3a8:	e9 cf       	rjmp	.-46     	; 0x37c <main+0x8>
			{
				display_flag = 0;
 3aa:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <display_flag+0x1>
 3ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <display_flag>
				adc_display(display_flag);
 3b2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <display_flag>
 3b6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <display_flag+0x1>
 3ba:	0e 94 d5 00 	call	0x1aa	; 0x1aa <adc_display>
 3be:	de cf       	rjmp	.-68     	; 0x37c <main+0x8>

000003c0 <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	TCNT0 = tcnt0_start;		// set to start value based on 0.125s or 0.5s 
 3e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tcnt0_start>
 3e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tcnt0_start+0x1>
 3ea:	86 bd       	out	0x26, r24	; 38
	++timecount0;	// count the number of times the interrupt has been reached
 3ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timecount0>
 3f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timecount0+0x1>
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timecount0+0x1>
 3fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timecount0>
	
	if (timecount0 >= time_delay)	// check if amount of overflows equals adc setting
 3fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <timecount0>
 402:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <timecount0+0x1>
 406:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <time_delay>
 40a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <time_delay+0x1>
 40e:	28 17       	cp	r18, r24
 410:	39 07       	cpc	r19, r25
 412:	b8 f0       	brcs	.+46     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		if ((PINB & 0b00100000) == 0b00100000)
 414:	1d 9b       	sbis	0x03, 5	; 3
 416:	0b c0       	rjmp	.+22     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			if ((PINB & 0b00010000) == 0b00010000)
 418:	1c 9b       	sbis	0x03, 4	; 3
 41a:	13 c0       	rjmp	.+38     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				cylon_loop(0);
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 85 00 	call	0x10a	; 0x10a <cylon_loop>
				timecount0 = 0;		// Restart the overflow counter
 424:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timecount0+0x1>
 428:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timecount0>
 42c:	0a c0       	rjmp	.+20     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
		} else {
			cylon_loop(4);
 42e:	84 e0       	ldi	r24, 0x04	; 4
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 85 00 	call	0x10a	; 0x10a <cylon_loop>
			timecount0 = 0;
 436:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timecount0+0x1>
 43a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timecount0>
			PORTD |= 0b00000000;
 43e:	8b b1       	in	r24, 0x0b	; 11
 440:	8b b9       	out	0x0b, r24	; 11
		}
	}
}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	7f 91       	pop	r23
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_21>:

ISR (ADC_vect)	/* handles ADC interrupts  */
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
	
	adc_reading = ADC;   /* ADC is in Free Running Mode - you don't have to set up anything for 
 474:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 478:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 47c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 480:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
						    the next conversion */
	if (adc_reading != 0) // check if new adc reading available
 484:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 488:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 48c:	89 2b       	or	r24, r25
 48e:	31 f0       	breq	.+12     	; 0x49c <__vector_21+0x38>
	{
		adc_flag = 1; // set flag
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <adc_flag+0x1>
 498:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_flag>
	}
	
	if ((adc_reading < LOWER_THRESHOLD_VOLTAGE) && (adc_reading > 0)) // check adc voltage is between 0V-2.5V
 49c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4a4:	8f 3f       	cpi	r24, 0xFF	; 255
 4a6:	91 40       	sbci	r25, 0x01	; 1
 4a8:	98 f4       	brcc	.+38     	; 0x4d0 <__vector_21+0x6c>
 4aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4b2:	89 2b       	or	r24, r25
 4b4:	69 f0       	breq	.+26     	; 0x4d0 <__vector_21+0x6c>
	{
		// 0.125s delay
		tcnt0_start = 39; // for 0.125s delay we start the timer count at 39
 4b6:	87 e2       	ldi	r24, 0x27	; 39
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tcnt0_start+0x1>
 4be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tcnt0_start>
		time_delay = 9; // for 0.125s delay we want 9 overflows to trigger an interrupt
 4c2:	89 e0       	ldi	r24, 0x09	; 9
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <time_delay+0x1>
 4ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <time_delay>
 4ce:	1a c0       	rjmp	.+52     	; 0x504 <__vector_21+0xa0>
		
	} else if ((adc_reading < UPPER_THRESHOLD_VOLTAGE) && (adc_reading > LOWER_THRESHOLD_VOLTAGE)) // otherwise if adc voltage is between 2.5V-5V
 4d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4d8:	8f 3f       	cpi	r24, 0xFF	; 255
 4da:	93 40       	sbci	r25, 0x03	; 3
 4dc:	98 f4       	brcc	.+38     	; 0x504 <__vector_21+0xa0>
 4de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4e6:	81 15       	cp	r24, r1
 4e8:	92 40       	sbci	r25, 0x02	; 2
 4ea:	60 f0       	brcs	.+24     	; 0x504 <__vector_21+0xa0>
	{
		// 0.5s delay
		tcnt0_start = 142; // for 0.5s delay we start the timer count at 142
 4ec:	8e e8       	ldi	r24, 0x8E	; 142
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tcnt0_start+0x1>
 4f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tcnt0_start>
		time_delay = 55; // for 0.5s delay we want 55 overflows to trigger an interrupt
 4f8:	87 e3       	ldi	r24, 0x37	; 55
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <time_delay+0x1>
 500:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <time_delay>
	}
 504:	9f 91       	pop	r25
 506:	8f 91       	pop	r24
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
