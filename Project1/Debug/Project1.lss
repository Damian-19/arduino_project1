
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000004c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000828  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c3  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000433  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e2  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a9  00000000  00000000  00001d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  88:	0c 94 24 02 	jmp	0x448	; 0x448 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
*initialization function 
***************************/
void init(void)
{
	//Set PortD to all outputs because LEDs are connected to this PORT
	DDRD = 0xff;	// 0xff = 0b11111111; all ones
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;		// 
  94:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0b00000000; // set PORTB to inputs
  96:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b00110000; // enable pull up resistors on pins 4 & 5
  98:	80 e3       	ldi	r24, 0x30	; 48
  9a:	85 b9       	out	0x05, r24	; 5
	
	// initialize global variables
	timecount0 = 0;
  9c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timecount0+0x1>
  a0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timecount0>
	adc_flag = 0;
  a4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adc_flag+0x1>
  a8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adc_flag>
	display_flag = 1; // initialize to 8-bit thermometer display
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <display_flag+0x1>
  b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <display_flag>
	tcnt0_start = 125; // begin timer count at 125
  b8:	8d e7       	ldi	r24, 0x7D	; 125
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tcnt0_start+0x1>
  c0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tcnt0_start>
	time_overflow = 0;
  c4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <time_overflow+0x1>
  c8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <time_overflow>
	direction = 0; // start cylon eyes heading down (7->0)
  cc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <direction+0x1>
  d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <direction>
	active_pin = 0; // start cylon eyes at bit 7
  d4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <active_pin+0x1>
  d8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <active_pin>
	
	TCCR0B = (5<<CS00);	// Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A = 0;			// Not strictly necessary as these are the reset states but it's good
  e0:	14 bc       	out	0x24, r1	; 36
	// practice to show what you're doing
	TCNT0 = tcnt0_start;	// assign timer count start
  e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tcnt0_start>
  e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tcnt0_start+0x1>
  ea:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);	// Enable Timer 0 interrupt
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	// ADC initialization
	ADMUX = ((1<<REFS0) | (0 << ADLAR) | (0<<MUX0));  // AVCC selected for VREF, ADC0 as ADC input
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = ((1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(6<<ADPS0)); /* Enable ADC, Start Conversion, Auto Trigger enabled, 
  f8:	8e ee       	ldi	r24, 0xEE	; 238
  fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
																		Interrupt enabled, Prescale = 64  */
	ADCSRB = (0<<ADTS0); // Select AutoTrigger Source to Free Running Mode
  fe:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	sei();				// Global interrupt enable (I=1)
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <cylon_loop>:
*		  (0, meaning full display; 4, meaning half display)
***************************************************************************************************/
void cylon_loop(int end)
{
	// down
	if (direction == 0) // check if direction is down
 106:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <direction>
 10a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <direction+0x1>
 10e:	23 2b       	or	r18, r19
 110:	21 f5       	brne	.+72     	; 0x15a <cylon_loop+0x54>
	{
		active_pin--; // decrement the active led
 112:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <active_pin>
 116:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <active_pin+0x1>
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	31 09       	sbc	r19, r1
 11e:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <active_pin+0x1>
 122:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <active_pin>
		if (active_pin <= end) // check if led has reached the end (pin 4 or 0)
 126:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <active_pin>
 12a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <active_pin+0x1>
 12e:	82 17       	cp	r24, r18
 130:	93 07       	cpc	r25, r19
 132:	34 f0       	brlt	.+12     	; 0x140 <cylon_loop+0x3a>
		{
			direction = 1; // set direction to up
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <direction+0x1>
 13c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <direction>
		}
		PORTD = 0b00000001 << active_pin; // set pin of portd to current led
 140:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <active_pin>
 144:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <active_pin+0x1>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <cylon_loop+0x4c>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	2a 95       	dec	r18
 154:	e2 f7       	brpl	.-8      	; 0x14e <cylon_loop+0x48>
 156:	8b b9       	out	0x0b, r24	; 11
 158:	08 95       	ret
		
		// up
	} else if (direction == 1) // check if direction is up
 15a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <direction>
 15e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <direction+0x1>
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f9 f4       	brne	.+62     	; 0x1a4 <cylon_loop+0x9e>
	{
		active_pin++; // increment the active led
 166:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <active_pin>
 16a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <active_pin+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <active_pin+0x1>
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <active_pin>
		if (active_pin >= 7) // check if led has reached end (pin 7)
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <active_pin>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <active_pin+0x1>
 180:	07 97       	sbiw	r24, 0x07	; 7
 182:	24 f0       	brlt	.+8      	; 0x18c <cylon_loop+0x86>
		{
			direction = 0; // set direction to down
 184:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <direction+0x1>
 188:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <direction>
		}
		PORTD = 0b00000001 << active_pin; // set pin of portd to current led
 18c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <active_pin>
 190:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <active_pin+0x1>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <cylon_loop+0x98>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	2a 95       	dec	r18
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <cylon_loop+0x94>
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	08 95       	ret

000001a6 <adc_display>:
* int display_flag: sets display to full 8-bit, 
*				or half 4-bit mode 
***********************************************/
void adc_display(int display_flag)
{
	if (display_flag) // full 8-bit display, this takes control of PORTD
 1a6:	89 2b       	or	r24, r25
 1a8:	09 f4       	brne	.+2      	; 0x1ac <adc_display+0x6>
 1aa:	59 c0       	rjmp	.+178    	; 0x25e <adc_display+0xb8>
	{
		if (adc_reading <= ONE_EIGHT_VOLTAGE)
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1b4:	81 38       	cpi	r24, 0x81	; 129
 1b6:	91 05       	cpc	r25, r1
 1b8:	10 f4       	brcc	.+4      	; 0x1be <adc_display+0x18>
		{
			PORTD = 0b00000000;
 1ba:	1b b8       	out	0x0b, r1	; 11
 1bc:	08 95       	ret
		} else if (adc_reading <= ONE_QUARTER_VOLTAGE)
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	91 40       	sbci	r25, 0x01	; 1
 1ca:	18 f4       	brcc	.+6      	; 0x1d2 <adc_display+0x2c>
		{
			PORTD = 0b00000001;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	08 95       	ret
		} else if (adc_reading <= THREE_EIGHT_VOLTAGE)
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1da:	81 38       	cpi	r24, 0x81	; 129
 1dc:	91 40       	sbci	r25, 0x01	; 1
 1de:	18 f4       	brcc	.+6      	; 0x1e6 <adc_display+0x40>
		{
			PORTD = 0b00000011;
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	08 95       	ret
		} else if (adc_reading <= HALF_VOLTAGE)
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	92 40       	sbci	r25, 0x02	; 2
 1f2:	18 f4       	brcc	.+6      	; 0x1fa <adc_display+0x54>
		{
			PORTD = 0b00000111;
 1f4:	87 e0       	ldi	r24, 0x07	; 7
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	08 95       	ret
		} else if (adc_reading <= FIVE_EIGHT_VOLTAGE)
 1fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 202:	80 38       	cpi	r24, 0x80	; 128
 204:	92 40       	sbci	r25, 0x02	; 2
 206:	18 f4       	brcc	.+6      	; 0x20e <adc_display+0x68>
		{
			PORTD = 0b00001111;
 208:	8f e0       	ldi	r24, 0x0F	; 15
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	08 95       	ret
		} else if (adc_reading <= THREE_QUARTER_VOLTAGE)
 20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 212:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 216:	81 15       	cp	r24, r1
 218:	93 40       	sbci	r25, 0x03	; 3
 21a:	18 f4       	brcc	.+6      	; 0x222 <adc_display+0x7c>
		{
			PORTD = 0b00011111;
 21c:	8f e1       	ldi	r24, 0x1F	; 31
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	08 95       	ret
		} else if (adc_reading <= SEVEN_EIGHT_VOLTAGE)
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 226:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 22a:	80 38       	cpi	r24, 0x80	; 128
 22c:	93 40       	sbci	r25, 0x03	; 3
 22e:	18 f4       	brcc	.+6      	; 0x236 <adc_display+0x90>
		{
			PORTD = 0b00111111;
 230:	8f e3       	ldi	r24, 0x3F	; 63
 232:	8b b9       	out	0x0b, r24	; 11
 234:	08 95       	ret
		} else if (adc_reading < MAX_THRESHOLD_VOLTAGE)
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 23e:	8f 3f       	cpi	r24, 0xFF	; 255
 240:	93 40       	sbci	r25, 0x03	; 3
 242:	18 f4       	brcc	.+6      	; 0x24a <adc_display+0xa4>
		{
			PORTD = 0b01111111;
 244:	8f e7       	ldi	r24, 0x7F	; 127
 246:	8b b9       	out	0x0b, r24	; 11
 248:	08 95       	ret
		} else if (adc_reading == MAX_THRESHOLD_VOLTAGE)
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 24e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 252:	8f 3f       	cpi	r24, 0xFF	; 255
 254:	93 40       	sbci	r25, 0x03	; 3
 256:	c9 f5       	brne	.+114    	; 0x2ca <adc_display+0x124>
		{
			PORTD = 0b11111111;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	8b b9       	out	0x0b, r24	; 11
 25c:	08 95       	ret
		}
	} else if (!display_flag) // half 4-bit display, this only alters bits 0-3
	{
		PORTD &= ~0b00001111;
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	8b b9       	out	0x0b, r24	; 11
		if (adc_reading <= ONE_QUARTER_VOLTAGE)
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 40       	sbci	r25, 0x01	; 1
 270:	18 f4       	brcc	.+6      	; 0x278 <adc_display+0xd2>
		{
			PORTD |= 0b00000000;
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	8b b9       	out	0x0b, r24	; 11
 276:	08 95       	ret
		} else if (adc_reading <= HALF_VOLTAGE)
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	92 40       	sbci	r25, 0x02	; 2
 284:	10 f4       	brcc	.+4      	; 0x28a <adc_display+0xe4>
		{
			PORTD |= 0b00000001;
 286:	58 9a       	sbi	0x0b, 0	; 11
 288:	08 95       	ret
		} else if (adc_reading <= THREE_QUARTER_VOLTAGE)
 28a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 28e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 292:	81 15       	cp	r24, r1
 294:	93 40       	sbci	r25, 0x03	; 3
 296:	20 f4       	brcc	.+8      	; 0x2a0 <adc_display+0xfa>
		{
			PORTD |= 0b00000011;
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	83 60       	ori	r24, 0x03	; 3
 29c:	8b b9       	out	0x0b, r24	; 11
 29e:	08 95       	ret
		} else if (adc_reading < MAX_THRESHOLD_VOLTAGE)
 2a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2a8:	8f 3f       	cpi	r24, 0xFF	; 255
 2aa:	93 40       	sbci	r25, 0x03	; 3
 2ac:	20 f4       	brcc	.+8      	; 0x2b6 <adc_display+0x110>
		{
			PORTD |= 0b00000111;
 2ae:	8b b1       	in	r24, 0x0b	; 11
 2b0:	87 60       	ori	r24, 0x07	; 7
 2b2:	8b b9       	out	0x0b, r24	; 11
 2b4:	08 95       	ret
		} else if (adc_reading == MAX_THRESHOLD_VOLTAGE)
 2b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2be:	8f 3f       	cpi	r24, 0xFF	; 255
 2c0:	93 40       	sbci	r25, 0x03	; 3
 2c2:	19 f4       	brne	.+6      	; 0x2ca <adc_display+0x124>
		{
			PORTD |= 0b00001111;
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	8f 60       	ori	r24, 0x0F	; 15
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	08 95       	ret

000002cc <main>:
/***********************************************
* main function
***********************************************/
int main(void)
{
	init();
 2cc:	0e 94 48 00 	call	0x90	; 0x90 <init>
		{
			if ((PINB & 0b00100000) == 0b00100000)
			{
				if ((PINB & 0b00010000) == 0b00000000)
				{
					adc_display(display_flag = 1); // set to full 8-bit mode
 2d0:	c1 e0       	ldi	r28, 0x01	; 1
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	init();
    while(1)
	{
		if (adc_flag) // checks new adc result available
 2d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_flag>
 2d8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_flag+0x1>
 2dc:	89 2b       	or	r24, r25
 2de:	d1 f3       	breq	.-12     	; 0x2d4 <main+0x8>
		{
			if ((PINB & 0b00100000) == 0b00100000)
 2e0:	1d 9b       	sbis	0x03, 5	; 3
 2e2:	0e c0       	rjmp	.+28     	; 0x300 <main+0x34>
			{
				if ((PINB & 0b00010000) == 0b00000000)
 2e4:	1c 99       	sbic	0x03, 4	; 3
 2e6:	f6 cf       	rjmp	.-20     	; 0x2d4 <main+0x8>
				{
					adc_display(display_flag = 1); // set to full 8-bit mode
 2e8:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <display_flag+0x1>
 2ec:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <display_flag>
 2f0:	ce 01       	movw	r24, r28
 2f2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <adc_display>
					adc_flag = 0; // reset
 2f6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adc_flag+0x1>
 2fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adc_flag>
 2fe:	ea cf       	rjmp	.-44     	; 0x2d4 <main+0x8>
				}
			} else if ((PINB & 0b00100000) == 0b00000000)
 300:	1d 99       	sbic	0x03, 5	; 3
 302:	e8 cf       	rjmp	.-48     	; 0x2d4 <main+0x8>
			{
				adc_display(display_flag = 0); // set to half 4-bit mode
 304:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <display_flag+0x1>
 308:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <display_flag>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <adc_display>
				adc_flag = 0;
 314:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adc_flag+0x1>
 318:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adc_flag>
 31c:	db cf       	rjmp	.-74     	; 0x2d4 <main+0x8>

0000031e <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect) // timer0 ISR
{
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	TCNT0 = tcnt0_start; // set to start value based on 0.125s or 0.5s 
 340:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tcnt0_start>
 344:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tcnt0_start+0x1>
 348:	86 bd       	out	0x26, r24	; 38
	++timecount0; // count the number of times the overflow has been reached
 34a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timecount0>
 34e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timecount0+0x1>
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timecount0+0x1>
 358:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timecount0>
	
	if (timecount0 >= time_overflow) // check if amount of overflows equals adc setting
 35c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <timecount0>
 360:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <timecount0+0x1>
 364:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <time_overflow>
 368:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <time_overflow+0x1>
 36c:	28 17       	cp	r18, r24
 36e:	39 07       	cpc	r19, r25
 370:	a8 f0       	brcs	.+42     	; 0x39c <__vector_16+0x7e>
	{
		if ((PINB & 0b00100000) == 0b00100000)
 372:	1d 9b       	sbis	0x03, 5	; 3
 374:	0b c0       	rjmp	.+22     	; 0x38c <__vector_16+0x6e>
		{
			if ((PINB & 0b00010000) == 0b00010000)
 376:	1c 9b       	sbis	0x03, 4	; 3
 378:	11 c0       	rjmp	.+34     	; 0x39c <__vector_16+0x7e>
			{
				cylon_loop(0); // start 8-bit cylon pattern
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 83 00 	call	0x106	; 0x106 <cylon_loop>
				timecount0 = 0;	// Restart the overflow counter
 382:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timecount0+0x1>
 386:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timecount0>
 38a:	08 c0       	rjmp	.+16     	; 0x39c <__vector_16+0x7e>
			}
		} else {
			cylon_loop(4); // start 4-bit cylon pattern
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 83 00 	call	0x106	; 0x106 <cylon_loop>
			timecount0 = 0;
 394:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timecount0+0x1>
 398:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timecount0>
		}
	}
}
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	bf 91       	pop	r27
 3a2:	af 91       	pop	r26
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	7f 91       	pop	r23
 3aa:	6f 91       	pop	r22
 3ac:	5f 91       	pop	r21
 3ae:	4f 91       	pop	r20
 3b0:	3f 91       	pop	r19
 3b2:	2f 91       	pop	r18
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_21>:

ISR (ADC_vect) // adc ISR
{
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	2f 93       	push	r18
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
	
	adc_reading = ADC; // store current adc value in variable
 3ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 3d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 3d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	adc_flag = 1; // set flag
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adc_flag+0x1>
 3e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adc_flag>
	
	if (adc_reading < LOWER_THRESHOLD_VOLTAGE) // check adc voltage is between 0V-2.5V
 3ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 3f2:	8f 3f       	cpi	r24, 0xFF	; 255
 3f4:	91 40       	sbci	r25, 0x01	; 1
 3f6:	68 f4       	brcc	.+26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		// 0.125s delay
		tcnt0_start = 39; // for 0.125s delay we start the timer count at 39
 3f8:	87 e2       	ldi	r24, 0x27	; 39
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tcnt0_start+0x1>
 400:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tcnt0_start>
		time_overflow = 9; // for 0.125s delay we want 9 overflows to trigger an interrupt
 404:	89 e0       	ldi	r24, 0x09	; 9
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <time_overflow+0x1>
 40c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <time_overflow>
 410:	13 c0       	rjmp	.+38     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		
	} else if (adc_reading < MAX_THRESHOLD_VOLTAGE) // otherwise if adc voltage is between 2.5V-5V
 412:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 416:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 41a:	8f 3f       	cpi	r24, 0xFF	; 255
 41c:	93 40       	sbci	r25, 0x03	; 3
 41e:	60 f4       	brcc	.+24     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		// 0.5s delay
		tcnt0_start = 142; // for 0.5s delay we start the timer count at 142
 420:	8e e8       	ldi	r24, 0x8E	; 142
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tcnt0_start+0x1>
 428:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tcnt0_start>
		time_overflow = 55; // for 0.5s delay we want 55 overflows to trigger an interrupt
 42c:	87 e3       	ldi	r24, 0x37	; 55
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <time_overflow+0x1>
 434:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <time_overflow>
	}
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
