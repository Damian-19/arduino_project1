
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000076a  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030c  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b8  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d3  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000196f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  9e:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
	
	sei();				// Global interrupt enable (I=1)
}

void loop()
{
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	1b b8       	out	0x0b, r1	; 11
  ac:	14 b8       	out	0x04, r1	; 4
  ae:	15 b8       	out	0x05, r1	; 5
  b0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timecount0+0x1>
  b4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timecount0>
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	85 bd       	out	0x25, r24	; 37
  bc:	14 bc       	out	0x24, r1	; 36
  be:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tcnt0_start>
  c2:	86 bd       	out	0x26, r24	; 38
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  d0:	8e ee       	ldi	r24, 0xEE	; 238
  d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  d6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <main>:
	
}
int main(void)
{
	init();
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
    while(1)
	{
		if (adc_flag == 1)
  e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <adc_flag>
  e6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <adc_flag+0x1>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	91 05       	cpc	r25, r1
  ee:	e9 f7       	brne	.-6      	; 0xea <main+0xc>
		{
			PORTD = PORTD | (1<<PORTD7);
  f0:	5f 9a       	sbi	0x0b, 7	; 11
			adc_flag = 0;
  f2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adc_flag+0x1>
  f6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <adc_flag>
  fa:	f3 cf       	rjmp	.-26     	; 0xe2 <main+0x4>

000000fc <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	TCNT0 = tcnt0_start;		// set to 
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tcnt0_start>
 112:	86 bd       	out	0x26, r24	; 38
	++timecount0;	// count the number of times the interrupt has been reached
 114:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timecount0>
 118:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timecount0+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timecount0+0x1>
 122:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timecount0>
	
	if (timecount0 >= time_delay)	
 126:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <time_delay>
 12a:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <time_delay+0x1>
 12e:	82 17       	cp	r24, r18
 130:	93 07       	cpc	r25, r19
 132:	30 f1       	brcs	.+76     	; 0x180 <__vector_16+0x84>
	{
		if (upDown == 1) {
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	51 f4       	brne	.+20     	; 0x150 <__vector_16+0x54>
			cylon++;
 13c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			if (cylon >= 7) upDown = 0;
 146:	87 30       	cpi	r24, 0x07	; 7
 148:	68 f0       	brcs	.+26     	; 0x164 <__vector_16+0x68>
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 14e:	0a c0       	rjmp	.+20     	; 0x164 <__vector_16+0x68>
		} 
		else {
			cylon--;
 150:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 154:	81 50       	subi	r24, 0x01	; 1
 156:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			if (cylon == 0) upDown = 1;
 15a:	81 11       	cpse	r24, r1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <__vector_16+0x68>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		PORTD = 1 << cylon;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <__data_end>
 16c:	02 c0       	rjmp	.+4      	; 0x172 <__vector_16+0x76>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <__vector_16+0x72>
 176:	8b b9       	out	0x0b, r24	; 11
		//PORTD = ~PORTD;		 Toggle all the bits
		timecount0 = 0;		// Restart the overflow counter
 178:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timecount0+0x1>
 17c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timecount0>
	}
}
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_21>:

ISR (ADC_vect)	/* handles ADC interrupts  */
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
	
	adc_reading = ADC;   /* ADC is in Free Running Mode - you don't have to set up anything for 
 1a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1ae:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_reading+0x1>
 1b2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_reading>
						    the next conversion */
	if (adc_reading != 0) // check if new adc reading available
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	39 f1       	breq	.+78     	; 0x208 <__vector_21+0x76>
	{
		adc_flag = 1; // set flag
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <adc_flag+0x1>
 1c2:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <adc_flag>
	}
	
	if ((adc_reading < LOWER_THRESHOLD_VOLTAGE) && (adc_reading > 0)) // check adc voltage is between 0V-2.5V
 1c6:	9c 01       	movw	r18, r24
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	31 09       	sbc	r19, r1
 1cc:	2e 3f       	cpi	r18, 0xFE	; 254
 1ce:	31 40       	sbci	r19, 0x01	; 1
 1d0:	58 f4       	brcc	.+22     	; 0x1e8 <__vector_21+0x56>
	{
		// 1s delay
		tcnt0_start = 125; // set start of timer count
 1d2:	8d e7       	ldi	r24, 0x7D	; 125
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <tcnt0_start+0x1>
 1da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tcnt0_start>
		time_delay = 125; // set number of overflows
 1de:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <time_delay+0x1>
 1e2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <time_delay>
 1e6:	10 c0       	rjmp	.+32     	; 0x208 <__vector_21+0x76>
	} else if ((adc_reading < UPPER_THRESHOLD_VOLTAGE) && (adc_reading > LOWER_THRESHOLD_VOLTAGE)) // otherwise if adc voltage is between 2.5V-5V
 1e8:	92 50       	subi	r25, 0x02	; 2
 1ea:	8f 3f       	cpi	r24, 0xFF	; 255
 1ec:	91 40       	sbci	r25, 0x01	; 1
 1ee:	60 f4       	brcc	.+24     	; 0x208 <__vector_21+0x76>
	{
		// 0.5s delay
		tcnt0_start = 142; // set start of timer count
 1f0:	8e e8       	ldi	r24, 0x8E	; 142
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <tcnt0_start+0x1>
 1f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tcnt0_start>
		time_delay = 55; // set number of overflows
 1fc:	87 e3       	ldi	r24, 0x37	; 55
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <time_delay+0x1>
 204:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <time_delay>
	}
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
