
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000798  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a0  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000313  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cb  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017f  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  9e:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
*initialization function 
***************************/
void init(void)
{
	//Set PortD to all outputs because LEDs are connected to this PORT
	DDRD = 0xff;	// 0xff = 0b11111111; all ones
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;		// disable all pull up resistors
  aa:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0b00000000; // set PORTB to inputs
  ac:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b11001111; // enable pull up resistors on pins 4 & 5
  ae:	8f ec       	ldi	r24, 0xCF	; 207
  b0:	85 b9       	out	0x05, r24	; 5
	
	timecount0 = 0;
  b2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timecount0+0x1>
  b6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timecount0>
	TCCR0B = (5<<CS00);	// Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A = 0;			// Not strictly necessary as these are the reset states but it's good
  be:	14 bc       	out	0x24, r1	; 36
	// practice to show what you're doing
	TCNT0 = tcnt0_start;			// Recall: 256-61 = 195 & 195*64us = 12.48ms, approx 12.5ms
  c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tcnt0_start>
  c4:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);	// Enable Timer 0 interrupt
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	// ADC initialization
	ADMUX = ((1<<REFS0) | (0 << ADLAR) | (0<<MUX0));  /* AVCC selected for VREF, ADC0 as ADC input  */
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = ((1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(6<<ADPS0));
  d2:	8e ee       	ldi	r24, 0xEE	; 238
  d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
										/* Enable ADC, Start Conversion, Auto Trigger enabled, 
										   Interrupt enabled, Prescale = 64  */
	ADCSRB = (0<<ADTS0); /* Select AutoTrigger Source to Free Running Mode 
  d8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
						    Strictly speaking - this is already 0, so we could omit the write to
						    ADCSRB, but this is included here so the intent is clear */
	
	sei();				// Global interrupt enable (I=1)
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <cylon_loop>:
*looping cylon pattern function
*********************************/
void cylon_loop(int bits)
{
	// cylon pattern
	if (direction == 1) { // check if direction is up
  e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
  e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
  e8:	21 30       	cpi	r18, 0x01	; 1
  ea:	31 05       	cpc	r19, r1
  ec:	d1 f4       	brne	.+52     	; 0x122 <cylon_loop+0x42>
		active_led++; // increment the active led
  ee:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
  f2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
  fe:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
		if (active_led >= bits) { // check if led has reached end (pin 7)
 102:	28 17       	cp	r18, r24
 104:	39 07       	cpc	r19, r25
 106:	20 f0       	brcs	.+8      	; 0x110 <cylon_loop+0x30>
			direction = 0; // set direction to down
 108:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 10c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		}
		PORTD = 0b00000001 << active_led; // set pin of portd to current led
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <cylon_loop+0x3a>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <cylon_loop+0x36>
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	08 95       	ret
		} else if (direction == 0) { // check if direction is down
 122:	23 2b       	or	r18, r19
 124:	d1 f4       	brne	.+52     	; 0x15a <cylon_loop+0x7a>
			active_led--; // decrement the active led
 126:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 12a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 134:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			if (active_led == 0) { // check if led has reached the start (pin 0)
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	31 f4       	brne	.+12     	; 0x148 <cylon_loop+0x68>
				direction = 1; // set direction to up
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 144:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			}
			PORTD = 0b00000001 << active_led; // set pin of portd to current led
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	a9 01       	movw	r20, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <cylon_loop+0x74>
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <cylon_loop+0x70>
 158:	4b b9       	out	0x0b, r20	; 11
 15a:	08 95       	ret

0000015c <main>:
		}
}

int main(void)
{
	init();
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
    while(1)
	{
		if (adc_flag == 1)
 160:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_flag>
 164:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_flag+0x1>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	91 05       	cpc	r25, r1
 16c:	e9 f7       	brne	.-6      	; 0x168 <main+0xc>
		{
			PORTD = PORTD | (1<<PORTD7);
 16e:	5f 9a       	sbi	0x0b, 7	; 11
			adc_flag = 0;
 170:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adc_flag+0x1>
 174:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adc_flag>
 178:	f3 cf       	rjmp	.-26     	; 0x160 <main+0x4>

0000017a <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	TCNT0 = tcnt0_start;		// set to 
 19c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tcnt0_start>
 1a0:	86 bd       	out	0x26, r24	; 38
	++timecount0;	// count the number of times the interrupt has been reached
 1a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timecount0>
 1a6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timecount0+0x1>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <timecount0+0x1>
 1b0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timecount0>
	
	if (timecount0 >= time_delay)	// check if amount of overflows equals adc setting
 1b4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <time_delay>
 1b8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <time_delay+0x1>
 1bc:	82 17       	cp	r24, r18
 1be:	93 07       	cpc	r25, r19
 1c0:	40 f0       	brcs	.+16     	; 0x1d2 <__vector_16+0x58>
	{
		cylon_loop(7);
 1c2:	87 e0       	ldi	r24, 0x07	; 7
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 70 00 	call	0xe0	; 0xe0 <cylon_loop>
		timecount0 = 0;		// Restart the overflow counter
 1ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timecount0+0x1>
 1ce:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timecount0>
	}
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_21>:

ISR (ADC_vect)	/* handles ADC interrupts  */
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	
	adc_reading = ADC;   /* ADC is in Free Running Mode - you don't have to set up anything for 
 208:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 20c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 210:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <adc_reading+0x1>
 214:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <adc_reading>
						    the next conversion */
	if (adc_reading != 0) // check if new adc reading available
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	39 f1       	breq	.+78     	; 0x26a <__vector_21+0x76>
	{
		adc_flag = 1; // set flag
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <adc_flag+0x1>
 224:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <adc_flag>
	}
	
	if ((adc_reading < LOWER_THRESHOLD_VOLTAGE) && (adc_reading > 0)) // check adc voltage is between 0V-2.5V
 228:	9c 01       	movw	r18, r24
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	31 09       	sbc	r19, r1
 22e:	2e 3f       	cpi	r18, 0xFE	; 254
 230:	31 40       	sbci	r19, 0x01	; 1
 232:	58 f4       	brcc	.+22     	; 0x24a <__vector_21+0x56>
	{
		// 1s delay
		tcnt0_start = 125; // set start of timer count
 234:	8d e7       	ldi	r24, 0x7D	; 125
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tcnt0_start+0x1>
 23c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tcnt0_start>
		time_delay = 125; // set number of overflows
 240:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <time_delay+0x1>
 244:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <time_delay>
 248:	10 c0       	rjmp	.+32     	; 0x26a <__vector_21+0x76>
	} else if ((adc_reading < UPPER_THRESHOLD_VOLTAGE) && (adc_reading > LOWER_THRESHOLD_VOLTAGE)) // otherwise if adc voltage is between 2.5V-5V
 24a:	92 50       	subi	r25, 0x02	; 2
 24c:	8f 3f       	cpi	r24, 0xFF	; 255
 24e:	91 40       	sbci	r25, 0x01	; 1
 250:	60 f4       	brcc	.+24     	; 0x26a <__vector_21+0x76>
	{
		// 0.5s delay
		tcnt0_start = 142; // set start of timer count
 252:	8e e8       	ldi	r24, 0x8E	; 142
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tcnt0_start+0x1>
 25a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tcnt0_start>
		time_delay = 55; // set number of overflows
 25e:	87 e3       	ldi	r24, 0x37	; 55
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <time_delay+0x1>
 266:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <time_delay>
	}
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
