
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001ca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000073e  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000663  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ad  00000000  00000000  000010a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a4  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000108  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  9e:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
uint16_t adc_reading;

void init(int timecount)
{
	//Set PortD to all outputs because LEDs are connected to this PORT
	DDRD = 0xff;	// 0xff = 0b11111111; all ones
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0;		// Initialise to all off
  aa:	1b b8       	out	0x0b, r1	; 11
	
	timecount0 = timecount;
  ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timecount0+0x1>
  b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timecount0>
	TCCR0B = (5<<CS00);	// Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A = 0;			// Not strictly necessary as these are the reset states but it's good
  b8:	14 bc       	out	0x24, r1	; 36
	// practice to show what you're doing
	TCNT0 = 61;			// Recall: 256-61 = 195 & 195*64us = 12.48ms, approx 12.5ms
  ba:	8d e3       	ldi	r24, 0x3D	; 61
  bc:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);	// Enable Timer 0 interrupt
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	// ADC initialization
	ADMUX = ((1<<REFS0) | (0 << ADLAR) | (0<<MUX0));  /* AVCC selected for VREF, ADC0 as ADC input  */
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = ((1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(6<<ADPS0));
  ca:	8e ee       	ldi	r24, 0xEE	; 238
  cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
										/* Enable ADC, Start Conversion, Auto Trigger enabled, 
										   Interrupt enabled, Prescale = 64  */
	ADCSRB = (0<<ADTS0); /* Select AutoTrigger Source to Free Running Mode 
  d0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
						    Strictly speaking - this is already 0, so we could omit the write to
						    ADCSRB, but this is included here so the intent is clear */
	
	sei();				// Global interrupt enable (I=1)
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <main>:
}

int main(void)
{
	init(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
    while(1)
	{
		if (adc_flag == 1)
  e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 05       	cpc	r25, r1
  ec:	e9 f7       	brne	.-6      	; 0xe8 <main+0x10>
		{
			PORTD = PORTD | (1<<PORTD7);
  ee:	5f 9a       	sbi	0x0b, 7	; 11
			adc_flag = 0;
  f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
  f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  f8:	f3 cf       	rjmp	.-26     	; 0xe0 <main+0x8>

000000fa <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	TCNT0 = 61;		//TCNT0 needs to be set to the start point each time
 10c:	8d e3       	ldi	r24, 0x3D	; 61
 10e:	86 bd       	out	0x26, r24	; 38
	++timecount0;	// count the number of times the interrupt has been reached
 110:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timecount0>
 114:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timecount0+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timecount0+0x1>
 11e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timecount0>
	
	if (timecount0 >= time_delay)	// 40 * 12.5ms = 500ms
 122:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 126:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 12a:	82 17       	cp	r24, r18
 12c:	93 07       	cpc	r25, r19
 12e:	38 f0       	brcs	.+14     	; 0x13e <__vector_16+0x44>
	{
		PORTD = ~PORTD;		// Toggle all the bits
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	80 95       	com	r24
 134:	8b b9       	out	0x0b, r24	; 11
		timecount0 = 0;		// Restart the overflow counter
 136:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <timecount0+0x1>
 13a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timecount0>
	}
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_21>:

ISR (ADC_vect)	/* handles ADC interrupts  */
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
	
	adc_reading = ADC;   /* ADC is in Free Running Mode - you don't have to set up anything for 
 164:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 168:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 16c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <adc_reading+0x1>
 170:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_reading>
						    the next conversion */
	if (adc_reading != 0)
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	e9 f0       	breq	.+58     	; 0x1b2 <__vector_21+0x62>
	{
		adc_flag = 1;
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
 180:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
	}
	if ((adc_reading < LOWER_THRESHOLD_VOLTAGE) & (adc_reading > 0))
 184:	9c 01       	movw	r18, r24
 186:	21 50       	subi	r18, 0x01	; 1
 188:	31 09       	sbc	r19, r1
 18a:	2e 3f       	cpi	r18, 0xFE	; 254
 18c:	31 40       	sbci	r19, 0x01	; 1
 18e:	38 f4       	brcc	.+14     	; 0x19e <__vector_21+0x4e>
	{
		time_delay = 40;
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 19c:	0a c0       	rjmp	.+20     	; 0x1b2 <__vector_21+0x62>
	} else if ((adc_reading < UPPER_THRESHOLD_VOLTAGE) & (adc_reading > LOWER_THRESHOLD_VOLTAGE))
 19e:	92 50       	subi	r25, 0x02	; 2
 1a0:	8f 3f       	cpi	r24, 0xFF	; 255
 1a2:	91 40       	sbci	r25, 0x01	; 1
 1a4:	30 f4       	brcc	.+12     	; 0x1b2 <__vector_21+0x62>
	{
		time_delay = 20;
 1a6:	84 e1       	ldi	r24, 0x14	; 20
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
